// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id         String    @id @default(uuid())
  userId     String?   @unique
  firstName  String?
  middleName String?
  lastName   String?
  birthDate  DateTime?
  password   String?
  email      String    @unique
  phone      String?
  addresses  Address[]
  orders     Order[]
  cart       Cart[]
  wishlist   Wishlist?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum AddressType {
  BILLING
  SHIPPING
}

model Address {
  id         String      @id @default(uuid())
  customer   Customer    @relation(fields: [customerId], references: [id])
  customerId String
  type       AddressType
  street     String
  city       String
  state      String
  postalCode String
  country    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Product {
  id            String           @id @default(uuid())
  sku           String           @unique
  name          String
  description   String?
  features      String[]
  category      Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId    String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  variants      ProductVariant[]
  CartItem      CartItem[]
}

model ProductVariant {
  id           String   @id @default(uuid())
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  sku          String   @unique
  price        Decimal
  currencyCode String
  stock        Int
  image        String
  attributes   Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Category {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?
  image       String?
  products    Product[]
  parentId    String?
  tier        Int?       @default(1)
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: Restrict)
  children    Category[] @relation("CategoryToCategory")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum CartStatus {
  ACTIVE
  ABANDONED
  COMPLETED
}

model Cart {
  id          String     @id @default(uuid())
  customer    Customer?  @relation(fields: [customerId], references: [id])
  customerId  String?
  items       CartItem[]
  totalAmount Decimal
  status      CartStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Order {
  id          String      @id @default(uuid())
  customer    Customer    @relation(fields: [customerId], references: [id])
  customerId  String
  items       OrderItem[]
  totalAmount Decimal
  currency    String
  status      OrderStatus
  paymentId   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  payment     Payment?
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wishlist {
  id         String         @id @default(uuid())
  customer   Customer       @relation(fields: [customerId], references: [id])
  customerId String         @unique
  items      WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(uuid())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  addedAt    DateTime @default(now())
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Payment {
  id            String        @id @default(uuid())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique
  transactionId String?
  status        PaymentStatus
  amount        Decimal
  createdAt     DateTime      @default(now())
}
