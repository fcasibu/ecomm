// This is your Prisma schema file,schemaschema
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id                    String     @id @default(uuid())
  currency              String     @default("USD")
  locale                String     @unique @default("en-US")
  freeShippingThreshold Decimal    @default(500.00)
  customers             Customer[]
  products              Product[]
  categories            Category[]
  orders                Order[]
  carts                 Cart[]
  payments              Payment[]
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  @@index([locale])
}

model Customer {
  id          String    @id @default(uuid())
  userId      String?   @unique
  anonymousId String?   @unique
  firstName   String?
  middleName  String?
  lastName    String?
  birthDate   DateTime?
  password    String?
  email       String?   @unique
  phone       String?
  addresses   Address[]
  orders      Order[]
  cart        Cart[]
  store       Store     @relation(fields: [locale], references: [locale], onDelete: Cascade)
  locale      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([locale])
}

enum AddressType {
  BILLING
  SHIPPING
}

model Address {
  id          String      @id @default(uuid())
  customer    Customer?   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String?
  userId      String?
  anonymousId String?
  type        AddressType
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Product {
  id               String            @id @default(uuid())
  sku              String            @unique
  name             String
  description      String?
  features         String[]
  category         Category?         @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  variants         ProductVariant[]
  deliveryPromises DeliveryPromise[]
  store            Store             @relation(fields: [locale], references: [locale], onDelete: Cascade)
  locale           String

  @@index([locale])
}

model ProductVariant {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  sku        String   @unique
  price      Decimal
  images     String[]
  sizes      Json // [{ stock: Int, reserved: Int, value: String }]
  attributes Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum DeliveryPromiseShippingMethod {
  STANDARD
  EXPRESS
  NEXT_DAY
}

model DeliveryPromise {
  id                  String                        @id @default(uuid())
  product             Product                       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId           String
  price               Decimal
  estimatedMinDays    Int
  estimatedMaxDays    Int
  shippingMethod      DeliveryPromiseShippingMethod @default(STANDARD)
  requiresShippingFee Boolean                       @default(false)
  createdAt           DateTime                      @default(now())
  updatedAt           DateTime                      @updatedAt
}

model Category {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?
  image       String?
  products    Product[]
  parentId    String?
  tier        Int?       @default(1)
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: Restrict)
  children    Category[] @relation("CategoryToCategory")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  store       Store      @relation(fields: [locale], references: [locale], onDelete: Cascade)
  locale      String

  @@index([locale])
}

enum CartStatus {
  ACTIVE
  ABANDONED
  COMPLETED
}

model Cart {
  id          String     @id @default(uuid())
  customer    Customer?  @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId  String?
  userId      String?
  anonymousId String?
  items       CartItem[]
  status      CartStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  store       Store      @relation(fields: [locale], references: [locale], onDelete: Cascade)
  locale      String

  @@index([locale])
}

model CartItemDeliveryPromise {
  id                  String                        @id @default(uuid())
  cartItem            CartItem                      @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  cartItemId          String
  price               Decimal
  estimatedMinDays    Int
  estimatedMaxDays    Int
  shippingMethod      DeliveryPromiseShippingMethod @default(STANDARD)
  requiresShippingFee Boolean?                      @default(false)
  selected            Boolean                       @default(false)
  createdAt           DateTime                      @default(now())
  updatedAt           DateTime                      @updatedAt
}

model CartItem {
  id               String                    @id @default(uuid())
  sku              String
  name             String
  size             String
  color            String
  quantity         Int
  deliveryPromises CartItemDeliveryPromise[]
  image            String
  price            Decimal
  cart             Cart                      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId           String
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt

  @@unique([cartId, sku, size, color, name])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Order {
  id                String      @id @default(uuid())
  customer          Customer?   @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerId        String?
  userId            String?
  anonymousId       String?
  shippingAddressId String
  billingAddressId  String
  items             OrderItem[]
  status            OrderStatus @default(PENDING)
  paymentId         String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  payment           Payment?
  store             Store       @relation(fields: [locale], references: [locale], onDelete: Cascade)
  locale            String

  @@index([locale])
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  sku       String
  image     String
  name      String
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethodType {
  CARD
  APPLE_PAY
  GOOGLE_PAY
  PAYPAL
}

model Payment {
  id            String            @id @default(uuid())
  order         Order             @relation(fields: [orderId], references: [id])
  orderId       String            @unique
  transactionId String?
  paymentMethod PaymentMethodType
  status        PaymentStatus
  amount        Decimal
  createdAt     DateTime          @default(now())
  store         Store             @relation(fields: [locale], references: [locale], onDelete: Cascade)
  locale        String

  @@index([locale])
}
